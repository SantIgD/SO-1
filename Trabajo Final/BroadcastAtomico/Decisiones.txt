Suponemos que todos los nodos estan en funcionamiento.

Por ahora vamos a resolver el algoritmo sin tener en cuenta que se puedan caer nodos

Ibamos a hacer un proceso paralelo para la recepcion de cada mensaje pero lo vimos inviable,
ya que deberiamos registrar y de-registrar nuevos atomos a los nuevos IDs por lo mismo decidimos
usar una estructura que almacene los identificadores de mensajes con una tupla que sea {Mensaje, CantM}
CantM es la cantidad de mensajes a recibir.

Por ahora lo estasmos haciendo con 4 nodos, tenemos que preguntar si se hacen con mas o como se
simularia.


Cada nodo almacena toda el historial de mensajes.


No aceptaremos que nodos se sumen a el servidor una vez qque este en funcionamiento. - Preguntar


Guardar nombre de nodos en el assender para saber de quien esperamos respuesta por si se muere
asi le hacemos un funeral piola paaaaa


Implementamos el algoritmo.

Vamos a hacerlo robusto, comenzamos desde lo macro... analizamos los nodos en la red.

Nos importa quien se cae



Cual es el problema de que se caigan los nodos? 

Decidimos que si se cae mas del 25% de los nodos, se cierra el servicio.



Para ejecutarlo bien: 

1 - Crear los nodos con los nombres nodo1,nodo2,...,nodoN (Con N mayor a 1)
2 - Link_nodos(CantNodos,String nombre de PC) desde un unico nodo
3 - Start() 


Vamos a controlar solo cuando los nodos se caen, en el caso de que en un nodo particular haya un error
y se muera un proceso, el nodo se caera. Por haber decidido que no se pueden agregar nodos una vez que
el sistema este en funcionamiento, si desearamos revivir el proceso que fallo en un nodo se generarian
estados inconsistentes y tendriamos que establecer y programar un protoco para que el nodo vuelva a las
canchas con un estado consistente. Para esto deberiamos establecer el protocolo para que un nodo se pueda
agregar a la red, ya que seria pedir informacion del estado del sistema a todos los nodos activos poniendose uno en pausa
y esto seria contradecir nuestra decision nombrada antes en el parrafo (ademas de que se agregaria otro nivel de
dificultad).



Teniendo en cuanta la decision de que todos los nodos esten conectados al momento del primer start() 
vamos a tomar como maxima cantidad de nodos al tamaÃ±o de la lista de nodes() para no definir una constante 

Decidimos que el servidor va a andar siempre y cuando haya al menos 75% de los nodos activos. De esta forma
evitamos inconsistencias y el minimo de nodos los establecemos en 2 (el caso de 1 es trivial por lo cual no lo consideramos).

Nota = En el caso de querer optimizar el codigo encontrar alguna forma de no contar la lista de nodos cada vez que se necesita


Si un proceso explota, los demas procesos de ese nodo terminan de hacer lo que estaban haciendo y mueren.


Estado inconsistentes o explota un proceso porque si -> lo hacemos mierda

Si explota un proceso porque si -> Cerramos luego de que los demas procesos manden sus info
Nos arrepentimos, de hacer esto se complica el hecho de matar el nodo y generaria que un nodo quedaria
activo sin los procesos deliver,sequencer y sender por lo tanto trabaria todo el sistema (los demas nodos quedarian
esperando a que este le responda una propuesta y esta nunca va a llegar, como el amor de ella)


Nuevo aproach, Si recibimos un mensaje que nada que ver... matamos el nodo, esto no puede salir a la luz.

Si un proceso explota random, hacemos que termine de mandar lo que tiene que mandar y cerramos el nodo amablemente


Desde el cliente si se hace una requst tanto sea append o get, el cliente se quedara esperando la respuesta
del servidor.

Preguntas martes:


 01) Podemos establecer un N minimo de nodos?

 02) Si se muere un proceso en un nodo podemos matar el Nodo(usando init:stop())?

 03) En el chequeo de errores, solo nos centramos en la muerte de nodos?
 
  ---------------------------------------------

 04) Por que el codigo dice Servidores sub i? Son las secuencias.

 05) El ledger es distribuido ya que el broadcast atomico lo es? No, cada nodo tiene tambien
 una parte del ledger.

 06) Podemos usar un solo nodo para la conexion entre cliente y servidor?
    
     Si se cae que pasa? Hay que cuidarlo? O muere el servidor?

 07) A quienes se conectan los clientes?

 08) Cada nodo del server deberia de tener su propio puerto?

 09) Como conectar los clientes al servidor? Como hicimos en el servidor de chat?

 10) No sabemos como resolver la conexion por tcp al server, onda... todo es distribuido menos
 el que recibe los mensajes, se le mandan los sockets a cada nodo y cada cliente se comunica directamente
 con un nodo, se recibe los mensajes en un unico nodo y se mandan a todos los nodos activos, se nos quemaron
 los papeles.

 11) El get pending es unicamente para diferenciar a la hora de recibir el deliver?

 12) Por ahora lo que tiene mas sentido es que el cliente pueda mandar todas las request que quiera. Es decir,
 no quedarse esperando la respuesta del server

 13) Controlamos los clientes en el sentido de cantidad conectados? Tenemos un maximo de clientes conectados?
     LLevamos el control de cuantos servers hay activos o podemos simplemente manejarlo por adentor del servidor
     y cuando se cae el servidor manejamos el evento con los clientes.



-------------
 Parte 3
-------------

1) Se invocan las operaciones del server con la tupla {c,op}, donde c es un contandor interno del cliente
de las operaciones que va realizando.

2) El cliente tiene que saber la cantidad de servers que pueden fallar. F -> numero minimo de servers activos 
para que ande el servicio. L es el conjunto de servers activos tal que |L| > F.

3) El cliente manda su request a los servers en L


------
Tareas
-------

Programar servidor

Modificar broadcast para poder utilizarlo

Programar cliente

Implementar la conexion

Consultar

Corregir

Hacer informe

AProbar la materia




