Suponemos que todos los nodos estan en funcionamiento.

Por ahora vamos a resolver el algoritmo sin tener en cuenta que se puedan caer nodos

Ibamos a hacer un proceso paralelo para la recepcion de cada mensaje pero lo vimos inviable,
ya que deberiamos registrar y de-registrar nuevos atomos a los nuevos IDs por lo mismo decidimos
usar una estructura que almacene los identificadores de mensajes con una tupla que sea {Mensaje, CantM}
CantM es la cantidad de mensajes a recibir.

Por ahora lo estasmos haciendo con 4 nodos, tenemos que preguntar si se hacen con mas o como se
simularia.


Cada nodo almacena toda el historial de mensajes.


No aceptaremos que nodos se sumen a el servidor una vez qque este en funcionamiento. - Preguntar


Guardar nombre de nodos en el assender para saber de quien esperamos respuesta por si se muere
asi le hacemos un funeral piola paaaaa


Implementamos el algoritmo.

Vamos a hacerlo robusto, comenzamos desde lo macro... analizamos los nodos en la red.

Nos importa quien se cae



Cual es el problema de que se caigan los nodos? 

Decidimos que si se cae mas del 25% de los nodos, se cierra el servicio.



Para ejecutarlo bien: 

1 - Crear los nodos con los nombres nodo1,nodo2,...,nodoN
2 - Link() desde un unico nodo
3 - Start() 


Vamos a controlar solo cuando los nodos se caen, en el caso de que en un nodo particular haya un error
y se muera un proceso, el nodo se caera. Por haber decidido que no se pueden agregar nodos una vez que
el sistema este en funcionamiento, si desearamos revivir el proceso que fallo en un nodo se generarian
estados inconsistentes y tendriamos que establecer y programar un protoco para que el nodo vuelva a las
canchas con un estado consistente. Para esto deberiamos establecer el protocolo para que un nodo se pueda
agregar a la red, ya que seria pedir informacion del estado del sistema a todos los nodos activos poniendose uno en pausa
y esto seria contradecir nuestra decision nombrada antes en el parrafo (ademas de que se agregaria otro nivel de
dificultad).



Teniendo en cuanta la decision de que todos los nodos esten conectados al momento del primer start() 
vamos a tomar como maxima cantidad de nodos al tama√±o de la lista de nodes() para no definir una constante 

